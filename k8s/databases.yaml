# databases.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: thesis
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:latest
        ports:
        - containerPort: 5433
        env:
        - name: POSTGRES_DB
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: postgres-password
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command: ["pg_isready"]
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data

---
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: thesis
spec:
  selector:
    app: postgres
  ports:
  - port: 5433
    targetPort: 5433
  clusterIP: None

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: thesis
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:latest
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: mongo-username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: mongo-password
        - name: MONGO_INITDB_DATABASE
          value: "sessions"
        volumeMounts:
        - name: mongo-data
          mountPath: /data/db
        - name: mongo-init
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command: ["mongosh", "--eval", "db.adminCommand('ping')"]
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: mongo-data
        persistentVolumeClaim:
          claimName: mongo-data
      - name: mongo-init
        configMap:
          name: mongo-init

---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: thesis
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: timescaledb
  namespace: thesis
spec:
  serviceName: timescaledb
  replicas: 1
  selector:
    matchLabels:
      app: timescaledb
  template:
    metadata:
      labels:
        app: timescaledb
    spec:
      containers:
      - name: timescaledb
        image: timescale/timescaledb:latest-pg16
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "pass"
        - name: POSTGRES_DB
          value: "timescaledb"
        volumeMounts:
        - name: timescale-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command: ["pg_isready", "-U", "postgres"]
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: timescale-data
        persistentVolumeClaim:
          claimName: timescale-data

---
apiVersion: v1
kind: Service
metadata:
  name: timescaledb
  namespace: thesis
spec:
  selector:
    app: timescaledb
  ports:
  - port: 5432
    targetPort: 5432