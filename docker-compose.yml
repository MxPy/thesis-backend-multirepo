services:
  gateway:
    build:
        context: ./thesis-prototype-apigateway
        dockerfile: Dockerfile
    ports:
      - 8000:8000
    depends_on:
      users:
        condition: service_healthy
      # mock:
      #   condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./thesis-prototype-apigateway
          target: /app
        - action: rebuild
          path: ./thesis-prototype-apigateway/req.txt
    # volumes:
    #   - ./thesis-prototype-apigateway:/app
    networks:
      - app-network
  
  admin-gateway:
    build:
        context: ./thesis-prototype-admin-apigateway
        dockerfile: Dockerfile
    depends_on:
      users:
        condition: service_healthy
      mock:
        condition: service_healthy
    profiles: ["admin", "prod", "all"]
    develop:
      watch:
        - action: sync
          path: ./thesis-prototype-admin-apigateway
          target: /app
        - action: rebuild
          path: ./thesis-prototype-admin-apigateway/req.txt
    ports:
      - 8001:8000
    volumes:
      - ./thesis-prototype-admin-apigateway:/app
    networks:
      - app-network

  users:
    build:
      context: ./thesis-prototype-server
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
    ports:
      - 8002:8000
    expose:
      - 50051
    develop:
      watch:
        - action: sync
          path: ./thesis-prototype-server
          target: /app
        - action: rebuild
          path: ./thesis-prototype-server/req.txt
    # volumes:
    #   - ./thesis-prototype-server:/app
    environment:
      - DATABASE_URL=postgresql://postgres:mysecretpassword@db/users
    # expose:
    #   - 8000
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://users:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  mock:
    build:
      context: ./thesis-mock-server
      dockerfile: Dockerfile
    develop:
      watch:
        - action: sync
          path: ./thesis-mock-server
          target: /app
        - action: rebuild
          path: ./thesis-mock-server/req.txt
    ports:
      - 8003:8000
    profiles: ["mock","images", "all"]
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://users:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: "rabbitmq:3.11.8-management-alpine"
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - app-network
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 3

  minio:
    container_name: minio
    image: minio/minio
    restart: always
    profiles: ["mock","minio","images", "all"]
    command: server --console-address :9001 --address 0.0.0.0:9000 /data
    networks:
      - app-network
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: username
      MINIO_ROOT_PASSWORD: password
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_SECURE: False
      MINIO_BUCKET_NAME: minio-bucket


  db:
    #mac
    #image: postgres:14
    #pc
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - 5433
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_DB=users
    networks:
    - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  timescaledb:
    image: timescale/timescaledb:latest-pg16
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: timescaledb
    ports:
      - "5432:5432"
    profiles: ["sensors", "prod", "all"]
    volumes:
      - timescale-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  
  mongo:
    image: mongo:latest
    volumes:
      - mongo_data:/data/db
      - ./thesis-prototype-server/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network
    expose:
      - 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: Username
      MONGO_INITDB_ROOT_PASSWORD: Password
      MONGO_INITDB_DATABASE: sessions
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

networks:
  app-network:
    driver: bridge

volumes:
      postgres_data: 
      mongo_data:
      timescale-data: