version: '3'

services:
  gateway:
    build:
        context: ./thesis-prototype-apigateway
        dockerfile: Dockerfile
    ports:
      - 8000:8000
    depends_on:
      users:
        condition: service_healthy
      # sensors:
      #   condition: service_healthy
      # health:
      #   condition: service_healthy
      # mock:
      #   condition: service_healthy
    volumes:
      - ./thesis-prototype-apigateway:/app
    networks:
      - app-network
  
  # admin-gateway:
  #   build:
  #       context: ./thesis-prototype-admin-apigateway
  #       dockerfile: Dockerfile
  #   depends_on:
  #     users:
  #       condition: service_healthy
  #     # sensors:
  #     #   condition: service_healthy
  #     # health:
  #     #   condition: service_healthy
  #     mock:
  #       condition: service_healthy
  #   ports:
  #     - 8001:8000
  #   volumes:
  #     - ./thesis-prototype-admin-apigateway:/app
  #   networks:
  #     - app-network

  users:
    build:
      context: ./thesis-prototype-server
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
    volumes:
      - ./thesis-prototype-server:/code:ro
    environment:
      - DATABASE_URL=postgresql://postgres:mysecretpassword@db/users
    # expose:
    #   - 8000
    ports:
      - 8002:8000
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://users:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # mock:
  #   build:
  #     context: ./thesis-mock-server
  #     dockerfile: Dockerfile
  #   ports:
  #     - 8003:8000
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://users:8000/health"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  sensors:
    build:
        context: ./thesis-sensors-service
        dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      timescaledb:
        condition: service_healthy
    environment:
      TIMESCALE_URL: postgres://postgres:pass@timescaledb:5432/timescaledb
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - app-network

  health:
    build:
        context: ./thesis-health-data-provider
        dockerfile: Dockerfile
    ports:
      - "3001:3000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      TIMESCALE_URL: postgresql://postgres:mysecretpassword@db/users
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - app-network


  db:
    #mac
    #image: postgres:14
    #pc
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - 5433
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_DB=users
    networks:
    - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  timescaledb:
    image: timescale/timescaledb:latest-pg16
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: timescaledb
    ports:
      - "5432:5432"
    volumes:
      - timescale-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  
  mongo:
    image: mongo:latest
    volumes:
      - mongo_data:/data/db
      - ./thesis-prototype-server/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network
    expose:
      - 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: Username
      MONGO_INITDB_ROOT_PASSWORD: Password
      MONGO_INITDB_DATABASE: sessions
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

networks:
  app-network:
    driver: bridge

volumes:
      postgres_data: 
      mongo_data:
      timescale-data: