workspace {
    model {
        user = person "Użytkownik" "Końcowy użytkownik systemu monitorowania zdrowia"
        admin = person "Administrator" "Osoba zarządzająca systemem i monitorująca jego działanie"
            
        softwareSystem = softwareSystem "Część serwerowa" "Centralna część systemu odpowiedzialna za przetwarzanie i przechowywanie danych"{
            group SystemBramyDostępu {
                api = container "BramaAPI" "Główny punkt dostępowy do systemu obsługujący żądania od klientów"
                aa = container "Serwis Autoryzacji I Uwierzytelniania Użytkowników" "Serwis odpowiedzialny za bezpieczeństwo i uprawnienia użytkowników"
                adminPanel = container "Panel Administracyjny" "Interfejs zarządzania danymi systemu"
                api -> aa "Wysyła zapytanie o autoryzacje i uwierzytelnienie użytkownika"
                api -> aa "Przekazuje zapytania i odpowiedzi o dane kont użytkowników"
            }
            
            group SystemMonitorowaniaZdrowia {
                dataPy = container "Serwis Przetwarzania Danych Zdrowotnych" "Serwis przetwarzający dane z czujników i generuje dane treningowe"
                dataNode = container "Serwis Dostępu Danych Zdrowotnych" "Serwis obsługujący operacje CRUD dla użytkowników, treningów i danych z czujników"
                
                api -> dataPy "Przekazuje żądania przetwarzania danych z czujników"
                api -> dataNode  "Przekazuje zapytania i odpowiedzi o dane zdrowotne użytkowników"
            }

            group SystemPrzechowywaniaDanych {
                sqlWraper = container "Bramka Dostępowa Relacyjnej Bazy Danych"
                timeWraper = container "Bramka Dostępowa Relacyjnej Bazy Danych Szeregów Czasowych"
                sql = container "Baza Danych Relacyjna" "Główna baza danych przechowująca strukturalne dane użytkowników"{
                    tags "Database"
                }
                nosql = container "Baza Danych Nie Relacyjna" "Baza danych do przechowywania danych sesji"{
                    tags "Database"
                }
                time = container "Baza Danych Relacyjna Szeregów Czasowych" "Baza danych do przechowywania nie przetworzonych danych zdrowotnych"{
                    tags "Database"
                }
                ota = container "Baza Danych Obiektów Oprogramowania Opaski" "Baza do przechowywania wersji oprogramowania sprzętowego opaski"{
                    tags "Database"
                }
                graphs = container "Baza Danych Obiektów Grafów" "Baza do przechowywania zmian parametrów zdrowotnych w czasie"{
                    tags "Database"
                }
                
                avatars = container "Baza Danych Obiektów Awatarów" "Baza do przechowywania awatarów użytkowników"{
                    tags "Database"
                }
                
                api -> ota "Zapisuje nowe wersje oprogramowania opaski"
                aa -> nosql "Zapisuje i odczytuje informacje sesji użytkowników"
                
                aa -> sqlWraper "Przesyła i odbiera dane kont użytkowników"
                dataPy -> sqlWraper "Przesyła i odbiera dane zdrowotne użytkowników"
                dataNode -> sqlWraper "Przesyła i odbiera dane zdrowotne użytkowników"
                dataNode -> timeWraper "Odbiera nieprzetworzone dane z czujników"
                avatars -> api "Wysyła awatary użytkowników"
                
                dataPy -> timeWraper "Przesyła i odbiera szeregi czasowe danych zdrowotnych użytkowników"
                timeWraper -> time "Zapisuje i odczytuje szeregi czasowe danych zdrowotnych użytkowników"
                sqlWraper -> sql "Zapisuje i odczytuje dane zdrowotne użytkowników"
                
                dataPy -> graphs "Przesyła i odbiera dane o parametrów zdrowotnych w czasie"
            }
            
            group SystemPośrednictwaWiadomości {
                queueAdmin = container "Kolejka Informacji Administracyjnych" "Kolejka do przesyłania powiadomień administracyjnych"{
                    tags "Database"
                }
                queueData = container "Kolejka Informacji Zdrowotnych" "Kolejka do przesyłania powiadomień o danych zdrowotnych"{
                    tags "Database"
                }
                queueAdmin -> api "Przesyła informacje administracyjne"
                queueData -> api "Przesyła informacje zdrowotne"
                
                dataPy -> queueAdmin "Przesyła informacje administracyjne"
                dataPy -> queueData "Przesyła informacje zdrowotne"
            } 
                
        
            admin -> adminPanel "Używa"
            adminPanel -> api "Wysyła zapytania o dane zdrowotne i kont użytkowników"
            adminPanel -> api "Wysyła nową wersje systemu opaski"
            api -> adminPanel "Przesyła powiadomienia o danych administracyjnych"
            
        }
        
        bandSystem = softwareSystem "Opaska sportowa" "Urządzenie noszone zbierające dane zdrowotne użytkowników"{
            group CzęśćSprzętowa {
                mcu = container "Mikrokontroler ESP32" "Główny procesor opaski odpowiedzialny za zbieranie i przesył danych"
                sensors = container "Czujniki" "Zestaw czujników do pomiaru parametrów zdrowotnych"
                card = container "Karta pamięci" "Pamięć do tymczasowego przechowywania danych"
            }
            group CzęśćOprogramowaniaSprzętowego {
                firmware = container "Oprogramowanie opaski" "System operacyjny i oprogramowanie sterujące opaską"
            }
            
            user -> bandSystem "Nosi"
            firmware -> mcu "Zarządza"
            mcu -> sensors "Jest połączony"
            firmware -> sensors "Odczytuje dane zdrowotne"
            firmware -> card "Zapisuje i odczytuje tymczasowe dane zdrowotne"
            mcu -> card "Jest połączony"
            ota -> bandSystem "Przesyła nową wersje oprogramowania"
        }
        
        appSystem = softwareSystem "Aplikacje mobilne" "Aplikacje na urządzenia mobilne do interakcji z systemem"{
            group AplikacjaIOS {
                iosApp = container "Aplikacja iOS" "Aplikacja mobilna dla systemu iOS"
                iosDb = container "Baza tymczasowych danych zdrowotnych iOS" "Lokalna baza danych na urządzeniach iOS"{
                    tags "Database"
                }
                
                user -> iosApp "Używa"
                iosApp -> iosDb "Zapisuje i odczytuje tymczasowe dane zdrowotne"
                bandSystem -> iosApp "Przesyła dane o statusie opaski oraz zdrowotne"
                
            }
            group AplikacjaAndroid {
                androidApp = container "Aplikacja Android" "Aplikacja mobilna dla systemu Android"
                androidDb = container "Baza tymczasowych danych zdrowotnych Android" "Lokalna baza danych na urządzeniach Android"{
                    tags "Database"
                }
                
                user -> androidApp "Używa"
                androidApp -> androidDb "Zapisuje i odczytuje tymczasowe dane zdrowotne"
                bandSystem -> androidApp "Przesyła dane o statusie opaski oraz zdrowotne"
                androidApp -> bandSystem "Przesyła informacje o aktualizacji oprogramowania opaski"
                iosApp -> bandSystem "Przesyła informacje o aktualizacji oprogramowania opaski"
                avatars -> appSystem "Pobiera awatary użytkowników"
            }
            api -> appSystem "Przesyła powiadomienia o danych zdrowotnych"
            appSystem -> api "Wysyła awatary użytkowników"
        }
    }

    views {
        styles {
            element "Database" {
                shape cylinder
            }
        }
        theme default
    }
}