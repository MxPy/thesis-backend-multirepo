workspace {

    model {
        user = person "Urzytkownik" "opis"
        admin = person "Administrator" "opis"
            
        softwareSystem = softwareSystem "Część serwerowa" "opis"{
            group BramaSystemu {
                api = container "BramaAPI" "opis"
                aa = container "SerwisAutoryzacjiIUwierzytelnianiaUrzytkowników" "opis"
                api -> aa "Wysyła zapytanie o autoryzacje i uwierzytelnienie użytkownika"
                api -> aa "Przekazuje zapytania i odpowiedzi o dane kont użytkowników"
                
                
            }
            group SystemMonitorowaniaZdrowia {
                dataPy = container "SerwisPrzetwarzaniaDanychDlaTreningów" "opis"
                dataNode = container "SerwisZarządzaniaUrzytkownikami" "opis"
                
                api -> dataPy "Przekazuje zapytania i odpowiedzi o dane zdrowotne użytkowników"
                api -> dataNode "Przekazuje zapytania  i odpowiedzi o dane zdrowotne użytkowników"
            }
            # group SystemSpołecznościowy {
            #     read = container "SerwisOdczytu" "TBD"
            #     write = container "SerwisZapisu" "TBD"
            # }

            
            group SystemPrzechowywaniaDanych {
                sqlWraper = container "BramkaDostępowaRelacyjnejBazyDanych" "opis"
                timeWrpaer = container "BramkaDostępowaRelacyjnejBazyDanychSzeregówCzasowych" "opis"
                sql = container "BazaDanychRelacyjna" "opis"{
                    tags "Database"
                }
                nosql = container "BazaDanychNieRelacyjna" "opis"{
                    tags "Database"
                }
                time = container "BazaDanychRelacyjnaSzeregówCzasowych" "opis"{
                    tags "Database"
                }
                avatars = container "BazaDanychObiektówAwatarówUrzytkowników" "opis"{
                    tags "Database"
                }
                images = container "BazaDanychObiektówObraków" "opis"{
                    tags "Database"
                }
                ota = container "BazaDanychObiektówOprogramowaniaOpaski" "opis"{
                    tags "Database"
                }
                graphs = container "BazaDanychObiektówDanychDoGrafówDanychZdrowotnych" "opis"{
                    tags "Database"
                }
                
                api -> avatars "Zapisuje awatary użytkowników"
                api -> images "Zapisuje obrazki użytkowników"
                api -> ota "Zapisuje nowe wersje oprogramowania opaski"
                aa -> nosql "Zapisuje i odczytuje informacje sesji użytkowników"
                
                aa -> sqlWraper "Przesyła i odbiera dane kont użytkowników"
                dataPy -> sqlWraper "Przesyła i odbiera dane zdrowotne użytkowników"
                dataNode -> sqlWraper "Przesyła i odbiera dane zdrowotne użytkowników"
                
                dataPy -> timeWrpaer "Przesyła i odbiera szeregi czaowe danych zdrowotnych użytkowników"
                timeWrpaer -> time "Zapisuje i odczytuje szeregi czaowe danych zdrowotnych użytkowników"
                sqlWraper -> sql "Zapisuje i Odczytuje dane zdrowotne użytkowników"
                
                dataPy -> graphs "Przesyła i odbiera dane o grafach danych zdrowotnych użytkowników"
                
                
                
            }
            
            group BrokerWiadomości {
                queueAdmin = container "KolejkaInformacjiAdministracyjnych" "opis"{
                    tags "Database"
                }
                queueData = container "KolejkaInformacjiZdrowotnych" "opis"{
                    tags "Database"
                }
                # queueSocial = container "KolejkaInformacjiSpołecznościowych" "opis"{
                #     tags "Database"
                # }
                queueAdmin -> api "Przesyła informacje administracyjne"
                queueData -> api "Przesyła informacje zdrowotne"
                
                dataPy -> queueAdmin "Przesyła informacje administracyjne"
                dataPy -> queueData "Przesyła informacje zdrowotne"
            } 
                
            group PanelAdministracyjny {
                adminPanel = container "PanelAdministracyjny" "opis"
                
                admin -> adminPanel "Używa"
                adminPanel -> api "Wysyła zapytania o dane zdrowotne i kont użytkowników"
                adminPanel -> api "Wysyła nową wersje systemu opaski"
                api -> adminPanel "Przesyła powiadomienia o danych administracyjnych"
            }
        }
        bandSystem = softwareSystem "Opaska sportowa" "opis"{
            group CzęśćSprzętowa {
                mcu = container "Mikrokontroler ESP32" "opis"
                sensors = container "Czujniki" "Pulsometr oraz akcelelrometr"
                card = container "Karta pamięci" "opis"
            }
            group CzęśćOprogramowaniaSprzętowego {
                firmware = container "Oprogramowanie opaski" "opis"
            }
            
            user -> bandSystem "Nosi"
            firmware -> mcu "Zarządza"
            mcu -> sensors "Jest połączony"
            firmware -> sensors "Odczytuje dane zdrowotne"
            firmware -> card "Zapisuje i odczytuje tymczasowe dane zdrowotne"
            mcu -> card "Jest połączony"
            ota -> bandSystem "Przesyła nową wersje oprogramowania"
        }
        appSystem = softwareSystem "Aplikacje mobilne" "opis"{
            group AplikacjaIOS {
                iosApp = container "Aplikacja iOS" "opis"
                iosDb = container "Baza tymczasowych danych zdrowotnych iOS" "opis"{
                    tags "Database"
                }
                
                user -> iosApp "Używa"
                iosApp -> iosDb "Zapisuje i odczytuje tymczasowe dane zdrowotne"
                bandSystem -> iosApp "Przesyła dane o statusie opaski oraz zdrowotne"
                iosApp -> bandSystem "Przesyła informacje o aktualizacji oprogramowania opaski"
            }
            group AplikacjaAndrioid {
                androidApp = container "Aplikacja Android" "opis"
                androidDb = container "Baza tymczasowych danych zdrowotnych Android" "opis"{
                    tags "Database"
                }
                
                user -> androidApp "Używa"
                androidApp -> androidDb "Zapisuje i odczytuje tymczasowe dane zdrowotne"
                bandSystem -> androidApp "Przesyła dane o statusie opaski oraz zdrowotne"
                androidApp -> bandSystem "Przesyła informacje o aktualizacji oprogramowania opaski"
            }
            api -> appSystem "Przesyła powiadomienia o danych zdrowowtnych"
            appSystem -> api "Wysyła obrazki oraz awatary użytkowników"
            images -> appSystem "Pobiera obrazki użytkowników"
            avatars -> appSystem "Pobiera awatary użytkowników"
        }
        
        
    }

    views {
    styles {
        element "Database" {
                    shape cylinder
                }
            }
        theme default
        
    }
}
